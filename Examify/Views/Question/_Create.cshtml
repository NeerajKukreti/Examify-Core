@model DataModel.QuestionModel
@using System.Text.Json
@{
    ViewBag.Title = "Create/Edit Question";
    Layout = null;
}

<style>
    label.error {
        color: brown !important;
    }


    .no-gutter {
        margin-right: 0;
        margin-left: 0;
    }

        .no-gutter > [class*='col-'] {
            padding-right: 0;
            padding-left: 0;
        }

    .editor-container {
        height: 200px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

        .editor-container .editor-container-option {
            height: 100px;
        }

    .ql-editor img {
        resize: both;
        overflow: auto;
        max-width: 100%;
        max-height: 500px;
    }

    .editor-panel {
        border: 1px solid #e1e5e9;
        border-radius: 6px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    /* Collapsible panel */
    .panel-header {
        background: linear-gradient(to bottom, #f8f9fa 0%, #e9ecef 100%);
        padding: 5px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
        border-bottom: 1px solid #e1e5e9;
        transition: background-color 0.2s;
    }

        .panel-header:hover {
            background: linear-gradient(to bottom, #e9ecef 0%, #dee2e6 100%);
        }

        .panel-header .panel-title {
            font-weight: 600;
            color: #495057;
            margin: 0;
            font-size: 14px;
        }

    .toggle-btn {
        border: none;
        background: none;
        font-size: 18px;
        cursor: pointer;
        color: #6c757d;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        transition: all 0.2s;
    }

        .toggle-btn:hover {
            background-color: rgba(0,0,0,0.1);
            color: #495057;
        }

    .panel-body {
        display: none;
        padding: 15px;
        background-color: #fff;
    }

    .page-content-white .page-title {
        margin: 0px
    }

    .form-section {
        background: #fff;
        border: 1px solid #e1e5e9;
        border-radius: 6px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .section-title {
        font-size: 16px;
        font-weight: 600;
        color: #495057;
        margin-bottom: 20px;
        padding-bottom: 8px;
        border-bottom: 2px solid #007bff;
        display: flex;
        align-items: center;
    }

        .section-title i {
            margin-right: 8px;
            font-size: 18px;
        }

    .form-group label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 5px;
    }

    .form-control {
        border-radius: 4px;
        border: 1px solid #ced4da;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .btn-add-option {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 500;
        transition: all 0.3s;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

        .btn-add-option:hover {
            background: linear-gradient(45deg, #20c997, #17a2b8);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

    .option-group {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 15px;
        position: relative;
        transition: all 0.2s;
    }

        .option-group:hover {
            border-color: #007bff;
            box-shadow: 0 2px 8px rgba(0,123,255,0.1);
        }

    .option-label {
        position: absolute;
        top: -8px;
        left: 15px;
        background: #fff;
        padding: 0 8px;
        font-size: 12px;
        font-weight: 500;
        color: #6c757d;
    }

    .checkbox label {
        font-weight: 500;
        color: #495057;
    }

    .btn-remove {
        background: linear-gradient(45deg, #dc3545, #c82333);
        border: none;
        border-radius: 4px;
        padding: 4px 8px;
        font-size: 11px;
        transition: all 0.2s;
    }

        .btn-remove:hover {
            background: linear-gradient(45deg, #c82333, #bd2130);
            transform: scale(1.05);
        }

    .options-section {
        background: #fff;
        border: 1px solid #e1e5e9;
        border-radius: 6px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .textarea-container {
        position: relative;
    }

        .textarea-container .form-control {
            resize: vertical;
            min-height: 80px;
        }

    /* Fix for Multi Select alignment */
    .multi-select-container {
        margin-top: 15px;
        padding: 10px 0;
    }

        .multi-select-container .checkbox {
            margin: 0;
            padding: 8px 0px;
            /* background: #f8f9fa;
                                                                border: 1px solid #e9ecef;
                                                                border-radius: 4px; */
            transition: all 0.2s;
        }

            .multi-select-container .checkbox:hover {
                /* background: #e9ecef;
                                                                    border-color: #007bff; */
            }

    /* Option controls alignment */
    .option-controls {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        gap: 8px;
        padding: 10px;
    }

    .option-checkbox {
        margin: 0;
        /* padding: 5px 8px; */
        /*  background: #fff;
                                                            border: 1px solid #dee2e6;
                                                            border-radius: 4px; */
        min-width: 120px;
    }

    .option-remove-btn {
        align-self: flex-start;
    }
    
    /* True/False options section */
    .true-false-section {
        display: none; /* Initially hidden */
        background: #fff;
        border: 1px solid #e1e5e9;
        border-radius: 6px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        margin-bottom: 20px;
    }

    .true-false-option {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 15px;
        position: relative;
        transition: all 0.2s;
    }

    .true-false-option:hover {
        border-color: #007bff;
        box-shadow: 0 2px 8px rgba(0,123,255,0.1);
    }

    .true-false-label {
        font-weight: 600;
        color: #495057;
        margin: 0;
        display: flex;
        align-items: center;
    }

    .true-false-label input {
        margin-right: 10px;
    }
</style>


<form asp-action="Create" method="post" id="questionForm">

    <div class="toolbar1" style="display: none">
        <span class="ql-formats">
            <select class="ql-font"></select>
            <select class="ql-size"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-script" value="sub"></button>
            <button class="ql-script" value="super"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-header" value="1"></button>
            <button class="ql-header" value="2"></button>
            <button class="ql-blockquote"></button>
            <button class="ql-code-block"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
            <button class="ql-indent" value="-1"></button>
            <button class="ql-indent" value="+1"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-direction" value="rtl"></button>
            <select class="ql-align"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-link"></button>
            <button class="ql-image"></button>
            <button class="ql-formula"></button>
        </span>
    </div>
    <div class="toolbar2" style="display: none">
        <span class="ql-formats">
            <select class="ql-font"></select>
            <select class="ql-size"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-script" value="sub"></button>
            <button class="ql-script" value="super"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-link"></button>
            <button class="ql-image"></button>
            <button class="ql-formula"></button>
        </span>
    </div>

    <div class="container-fluid">

        <input type="hidden" asp-for="QuestionId" />
        <input type="hidden" name="QuestionEnglish" id="hfQuestionEnglish" />
        <input type="hidden" name="QuestionHindi" id="hfQuestionHindi" />
        <input type="hidden" name="AdditionalTextEnglish" id="hfAdditionalEnglish" />
        <input type="hidden" name="AdditionalTextHindi" id="hfAdditionalHindi" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-section">
            <div class="section-title">
                Question configuration
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group ">
                        <label asp-for="SubjectId">Subject <span class="text-danger">*</span></label>
                        <select asp-for="SubjectId" class="form-control select" id="ddlSubject" name="SubjectId">
                            <option value="">Select Subject</option>
                        </select>
                        <span asp-validation-for="SubjectId" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group ">
                        <label asp-for="QuestionTypeId">Question Type <span class="text-danger">*</span></label>
                        @if (Model.QuestionId > 0)
                        {
                            <!-- For editing, use readonly with hidden field -->
                            <select class="form-control select" id="ddlQuestionType" disabled>
                                <option value="">Select Type</option>
                            </select>
                            <input type="hidden" name="QuestionTypeId" id="hiddenQuestionTypeId" value="@Model.QuestionTypeId" />
                        }
                        else
                        {
                            <!-- For new questions, use normal dropdown -->
                            <select asp-for="QuestionTypeId" class="form-control select" id="ddlQuestionType" name="QuestionTypeId">
                                <option value="">Select Type</option>
                            </select>
                        }
                        <span asp-validation-for="QuestionTypeId" class="text-danger"></span>
                    </div>

                </div>
                <div class="col-md-6">
                    <div class="form-group ">
                        <label asp-for="TopicId">Topic <span class="text-danger">*</span></label>
                        <select asp-for="TopicId" class="form-control select" id="ddlTopic" name="TopicId">
                            <option value="">Select Topic</option>
                        </select>
                        <span asp-validation-for="TopicId" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group multi-select-container">
                        <div class="checkbox">
                            <label style="font-weight: 500;display:flex;">
                                <input asp-for="IsMultiSelect" style="margin-right:8px;" /> Multi Select Question
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="editor-panel ">
            <div class="panel-header">
                <div class="panel-title">
                    Question English <span class="text-danger">*</span>
                </div>
                <button type="button" class="toggle-btn">+</button>
            </div>
            <div class="panel-body">
                <div class="editor-container" id="editor-question-english" data-name="Question english"></div>
                <span class="text-danger" id="valQuestionEnglish"></span>
            </div>
        </div>

        <div class="editor-panel" data-editor-target="QuestionHindi" data-editor-id="editor-question-hindi">
            <div class="panel-header">
                <div class="panel-title">
                    Question Hindi
                </div>
                <button type="button" class="toggle-btn">+</button>
            </div>
            <div class="panel-body">
                <div class="editor-container" id="editor-question-hindi" data-name="Question hindi"></div>
            </div>
        </div>

        <div class="editor-panel" data-editor-target="AdditionalTextEnglish" data-editor-id="editor-additional-english">
            <div class="panel-header">
                <div class="panel-title">
                    Additional Text English
                </div>
                <button type="button" class="toggle-btn">+</button>
            </div>
            <div class="panel-body">
                <div class="editor-container" id="editor-additional-english" data-name="Additional Text English"></div>
            </div>
        </div>

        <div class="editor-panel" data-editor-target="AdditionalTextHindi" data-editor-id="editor-additional-hindi">
            <div class="panel-header">
                <div class="panel-title">
                    Additional Text Hindi
                </div>
                <button type="button" class="toggle-btn">+</button>
            </div>
            <div class="panel-body">
                <div class="editor-container" id="editor-additional-hindi" data-name="Additional Text Hindi"></div>
            </div>
        </div>

        <!-- Explanation Section -->
        <div class="form-section">
            <div class="section-title">
                Explanation
            </div>
            <div class="form-group textarea-container">
                <textarea asp-for="Explanation" class="form-control" placeholder="Question explanation..."></textarea>
            </div>
        </div>

        <!-- True/False Options Section -->
        <div class="true-false-section" id="true-false-section">
            <div class="section-title">
                True/False Options
            </div>
            <span class="text-danger" id="tfOptionsValidation"></span>
            <div id="tf-options-wrapper">
                <div class="true-false-option" data-option-index="1">
                    <div class="true-false-label">
                        <input type="checkbox" class="tf-option" data-option-value="true" /> True
                    </div>
                    <input type="hidden" class="option-hidden-field" data-option-index="1" name="Options[0].Text" value="<p>True</p>" />
                    <input type="hidden" class="option-choiceid-field" data-option-index="1" name="Options[0].ChoiceId" />
                    <input type="hidden" class="option-correct-hidden" name="Options[0].IsCorrect" value="false" />
                </div>
                <div class="true-false-option" data-option-index="2">
                    <div class="true-false-label">
                        <input type="checkbox" class="tf-option" data-option-value="false" /> False
                    </div>
                    <input type="hidden" class="option-hidden-field" data-option-index="2" name="Options[1].Text" value="<p>False</p>" />
                    <input type="hidden" class="option-choiceid-field" data-option-index="2" name="Options[1].ChoiceId" />
                    <input type="hidden" class="option-correct-hidden" name="Options[1].IsCorrect" value="false" />
                </div>
            </div>
        </div>

        <!-- MCQ Options Section -->
        <div class="options-section" id="options-section">
            <div class="form-group">
                <button type="button" id="btnAddOption" class="btn btn-outline-primary mb-3">
                    <i class="glyphicon glyphicon-plus"></i> Add More Option
                </button>
                <span class="text-danger" id="optionsValidation"></span>
            </div>

            <div id="options-wrapper">
                <div class="form-group option-group" data-option-index="1">
                    <div class="option-label">Option 1</div>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="editor-container" style="height: 50px !important" id="editor-option1" data-name="Option 1"></div>
                            <input type="hidden" class="option-hidden-field" data-option-index="1" name="Options[0].Text" />
                            <input type="hidden" class="option-choiceid-field" data-option-index="1" name="Options[0].ChoiceId" />
                            <input type="hidden" class="option-correct-hidden" name="Options[0].IsCorrect" value="false" />
                            <span class="text-danger option-error" id="valOption1"></span>
                        </div>
                        <div class="col-md-2 option-controls">
                            <div class="option-checkbox checkbox">
                                <label>
                                    <input type="checkbox" /> Is Correct
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group option-group" data-option-index="2">
                    <div class="option-label">Option 2</div>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="editor-container" style="height: 50px !important" id="editor-option2" data-name="Option 2"></div>
                            <input type="hidden" class="option-hidden-field" data-option-index="2" name="Options[1].Text" />
                            <input type="hidden" class="option-choiceid-field" data-option-index="2" name="Options[1].ChoiceId" />
                            <input type="hidden" class="option-correct-hidden" name="Options[1].IsCorrect" value="false" />
                            <span class="text-danger option-error" id="valOption2"></span>
                        </div>
                        <div class="col-md-2 option-controls">
                            <div class="option-checkbox checkbox">
                                <label>
                                    <input type="checkbox" /> Is Correct
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group option-group" data-option-index="3">
                    <div class="option-label">Option 3</div>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="editor-container" style="height: 50px !important" id="editor-option3" data-name="Option 3"></div>
                            <input type="hidden" class="option-hidden-field" data-option-index="3" name="Options[2].Text" />
                            <input type="hidden" class="option-choiceid-field" data-option-index="3" name="Options[2].ChoiceId" />
                            <input type="hidden" class="option-correct-hidden" name="Options[2].IsCorrect" value="false" />
                            <span class="text-danger option-error" id="valOption3"></span>
                        </div>
                        <div class="col-md-2 option-controls">
                            <div class="option-checkbox checkbox">
                                <label>
                                    <input type="checkbox" /> Is Correct
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group option-group" data-option-index="4">
                    <div class="option-label">Option 4</div>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="editor-container" style="height: 50px !important" id="editor-option4" data-name="Option 4"></div>
                            <input type="hidden" class="option-hidden-field" data-option-index="4" name="Options[3].Text" />
                            <input type="hidden" class="option-choiceid-field" data-option-index="4" name="Options[3].ChoiceId" />
                            <input type="hidden" class="option-correct-hidden" name="Options[3].IsCorrect" value="false" />
                            <span class="text-danger option-error" id="valOption4"></span>
                        </div>
                        <div class="col-md-2 option-controls">
                            <div class="option-checkbox checkbox">
                                <label>
                                    <input type="checkbox" /> Is Correct
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-end">
            <button class="btn btn-outline-primary mb-2" style="margin-top: 20px; margin-right: 10px;width: 80px;">
                Cancel
            </button>
            <button class="btn btn-outline-primary mb-2" style="margin-top: 20px; width: 80px;" type="submit">
                @(Model.QuestionId > 0 ? "Update" : "Add")
            </button>
        </div>


    </div>

</form>

<script src="@Url.Content("~/scripts/custom/questionbank/question.js")"></script>
<script src="@Url.Content("~/theme/plugins/jquery-validation 1.19.5/jquery.validate.js")"></script>

<script>
    // Inject model data for edit mode
    window.modelData = @Html.Raw(JsonSerializer.Serialize(Model));

    $(function () {
        // Default to MCQ question type for new questions
        if (!window.modelData || !window.modelData.QuestionId || window.modelData.QuestionId === 0) {
            // Wait for the question types to be loaded before setting default
            $(document).on('questionTypesLoaded', function() {
                if (AllQuestionTypes && AllQuestionTypes.length > 0) {
                    // Find MCQ type from AllQuestionTypes
                    const mcqType = AllQuestionTypes.find(type => 
                        type.TypeName.toLowerCase().includes('mcq') || 
                        type.TypeName.toLowerCase().includes('multiple choice')
                    );
                    
                    if (mcqType) {
                        setTimeout(function() {
                            $('#ddlQuestionType').val(mcqType.QuestionTypeId).trigger('change');
                        }, 100);
                    } else if (AllQuestionTypes.length > 0) {
                        // Default to first type if MCQ not found
                        setTimeout(function() {
                            $('#ddlQuestionType').val(AllQuestionTypes[0].QuestionTypeId).trigger('change');
                        }, 100);
                    }
                }
            });
        }

        // Handle question type change
        $(document).off('change.questionType', '#ddlQuestionType').on('change.questionType', '#ddlQuestionType', function() {
            const typeId = parseInt($(this).val());
            
            // Update hidden field if in edit mode
            if ($('#hiddenQuestionTypeId').length) {
                $('#hiddenQuestionTypeId').val(typeId);
            }
            
            // Find question type from AllQuestionTypes
            let questionType = null;
            if (AllQuestionTypes && AllQuestionTypes.length > 0) {
                questionType = AllQuestionTypes.find(type => type.QuestionTypeId === typeId);
            }
            
            // Check if it's a True/False type
            const isTrueFalseType = questionType && (
                questionType.TypeName.toLowerCase().includes('true/false') || 
                questionType.TypeName.toLowerCase().includes('true false') ||
                questionType.TypeName.toLowerCase().includes('t/f')
            );
            
            // Toggle visibility based on question type
            if (isTrueFalseType) {
                $('#options-section').hide();
                $('#true-false-section').show();
                $('#IsMultiSelect').prop('checked', false).prop('disabled', true);
            } else {
                $('#options-section').show();
                $('#true-false-section').hide();
                $('#IsMultiSelect').prop('disabled', false);
            }
        });

        // Handle True/False checkbox behavior (only one can be selected)
        $(document).off('change.tfOption', '.tf-option').on('change.tfOption', '.tf-option', function() {
            if ($(this).is(':checked')) {
                // Uncheck other options
                $('.tf-option').not(this).prop('checked', false);
                
                // Update hidden field values
                $('.true-false-option').each(function(i) {
                    const isChecked = $(this).find('.tf-option').is(':checked');
                    $(this).find('.option-correct-hidden').val(isChecked ? 'true' : 'false');
                });
            }
        });

        // Refill Quill editors if model data exists
        if (window.modelData) {
            if (window.__quillEditors && window.__quillEditors['editor-question-english']) {
                window.__quillEditors['editor-question-english'].root.innerHTML = window.modelData.QuestionEnglish || '';
            }
            if (window.__quillEditors && window.__quillEditors['editor-question-hindi']) {
                window.__quillEditors['editor-question-hindi'].root.innerHTML = window.modelData.QuestionHindi || '';
            }
            if (window.__quillEditors && window.__quillEditors['editor-additional-english']) {
                window.__quillEditors['editor-additional-english'].root.innerHTML = window.modelData.AdditionalTextEnglish || '';
            }
            if (window.__quillEditors && window.__quillEditors['editor-additional-hindi']) {
                window.__quillEditors['editor-additional-hindi'].root.innerHTML = window.modelData.AdditionalTextHindi || '';
            }

            // Handle True/False question type if editing
            // We need to wait for question types to be loaded to know the question types
            $(document).on('questionTypesLoaded', function() {
                // Find question type from AllQuestionTypes
                let questionType = null;
                if (window.modelData && window.modelData.QuestionTypeId && AllQuestionTypes) {
                    questionType = AllQuestionTypes.find(type => type.QuestionTypeId === window.modelData.QuestionTypeId);
                }
                
                // Check if it's a True/False type
                const isTrueFalseType = questionType && (
                    questionType.TypeName.toLowerCase().includes('true/false') || 
                    questionType.TypeName.toLowerCase().includes('true false') ||
                    questionType.TypeName.toLowerCase().includes('t/f')
                );
                
                console.log("Question type:", questionType ? questionType.TypeName : "Unknown");
                
                if (isTrueFalseType) {
                    console.log("Loading True/False question for editing");
                    console.log("Options:", window.modelData.Options);
                    
                    // Set correct True/False option
                    if (window.modelData.Options && window.modelData.Options.length > 0) {
                        // Make sure we have both True and False options
                        let trueOption = null;
                        let falseOption = null;
                        
                        // Find True and False options
                        for (let i = 0; i < window.modelData.Options.length; i++) {
                            const opt = window.modelData.Options[i];
                            const optText = opt.Text ? opt.Text.toLowerCase() : '';
                            
                            if (optText.includes('true')) {
                                trueOption = opt;
                            } else if (optText.includes('false')) {
                                falseOption = opt;
                            }
                        }
                        
                        console.log("True option:", trueOption);
                        console.log("False option:", falseOption);
                        
                        // Set True option
                        if (trueOption) {
                            // Set checkbox if it's correct
                            if (trueOption.IsCorrect) {
                                $('.tf-option[data-option-value="true"]').prop('checked', true);
                            }
                            
                            // Always set ChoiceId
                            const trueChoiceId = trueOption.ChoiceId || '';
                            $('.true-false-option').eq(0).find('.option-choiceid-field').val(trueChoiceId);
                            console.log("Set True ChoiceId to:", trueChoiceId);
                        }
                        
                        // Set False option
                        if (falseOption) {
                            // Set checkbox if it's correct
                            if (falseOption.IsCorrect) {
                                $('.tf-option[data-option-value="false"]').prop('checked', true);
                            }
                            
                            // Always set ChoiceId
                            const falseChoiceId = falseOption.ChoiceId || '';
                            $('.true-false-option').eq(1).find('.option-choiceid-field').val(falseChoiceId);
                            console.log("Set False ChoiceId to:", falseChoiceId);
                        }
                        
                        // Make sure the correct hidden values are set too
                        $('.true-false-option').each(function(i) {
                            const isChecked = $(this).find('.tf-option').is(':checked');
                            $(this).find('.option-correct-hidden').val(isChecked ? 'true' : 'false');
                        });
                    }
                } else {
                    // Add extra option groups if needed for MCQ
                    if (window.modelData.Options && window.modelData.Options.length > 4) {
                        for (var i = 4; i < window.modelData.Options.length; i++) {
                            if (window.QuestionOptions && typeof window.QuestionOptions.add === 'function') {
                                window.QuestionOptions.add();
                            }
                        }
                    }

                    // Refill options for MCQ
                    if (window.modelData.Options && window.modelData.Options.length > 0) {
                        $('#options-wrapper .option-group').each(function (i) {
                            var opt = window.modelData.Options[i];
                            if (opt) {
                                var editorId = $(this).find('.editor-container').attr('id');
                                if (window.__quillEditors && window.__quillEditors[editorId]) {
                                    window.__quillEditors[editorId].root.innerHTML = opt.Text || '';
                                }
                                $(this).find('.option-hidden-field').val(opt.Text || '');
                                $(this).find('input[type="checkbox"]').prop('checked', !!opt.IsCorrect);
                                $(this).find('.option-correct-hidden').val(opt.IsCorrect ? 'true' : 'false');

                                // Set ChoiceId hidden field
                                var $choiceId = $(this).find('.option-choiceid-field');
                                if ($choiceId.length === 0) {
                                    $choiceId = $('<input type="hidden" class="option-choiceid-field" />').appendTo($(this));
                                }
                                $choiceId.val(opt.ChoiceId || '');
                                $choiceId.attr('name', 'Options[' + i + '].ChoiceId');
                            }
                        });
                    }
                }
                
                // Trigger the question type change to show/hide appropriate sections
                $('#ddlQuestionType').trigger('change');
            });

            // Set dropdowns and other controls
            $('#ddlSubject').val(window.modelData.SubjectId);
            $('#ddlQuestionType').val(window.modelData.QuestionTypeId);
            $('#ddlTopic').val(window.modelData.TopicId);
            $('#IsMultiSelect').prop('checked', !!window.modelData.IsMultiSelect);
            $('textarea[asp-for="Explanation"]').val(window.modelData.Explanation || '');
        }

        $(document).on('subjectsLoaded', function () {
            if (window.modelData && window.modelData.SubjectId) {
                $('#ddlSubject').val(window.modelData.SubjectId);
                // Trigger topic load if editing
                loadTopics(window.modelData.SubjectId, function () {
                    $('#ddlTopic').val(window.modelData.TopicId);
                });
            }
        });
        
        $(document).on('questionTypesLoaded', function () {
            if (window.modelData && window.modelData.QuestionId > 0) {
                $('#ddlQuestionType').val(window.modelData.QuestionTypeId).trigger('change');
            } else if (AllQuestionTypes && AllQuestionTypes.length > 0) {
                // Find MCQ type from AllQuestionTypes for new questions
                const mcqType = AllQuestionTypes.find(type => 
                    type.TypeName.toLowerCase().includes('mcq') || 
                    type.TypeName.toLowerCase().includes('multiple choice')
                );
                
                if (mcqType) {
                    // Default to MCQ for new questions
                    $('#ddlQuestionType').val(mcqType.QuestionTypeId).trigger('change');
                } else if (AllQuestionTypes.length > 0) {
                    // Default to first type if MCQ not found
                    $('#ddlQuestionType').val(AllQuestionTypes[0].QuestionTypeId).trigger('change');
                }
            }
        });
    });
</script>




